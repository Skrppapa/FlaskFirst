# Flask WEB-Разработка

## Основная терминология

**endpoint** (ручка) — это конкретный адрес (URL) на сервере, к которому можно обратиться. Сервер знает, что нужно делать, когда к этому адресу приходит запрос. 
Пример: запрос на адрес **`/`** — главная страница, `/login` — страница входа. В backend-е каждый endpoint — это функция, которая получает запрос и формирует ответ.

**API (Application Programming Interface)** - это набор правил и точек входа, по которым одна программа может общаться с другой. 
В контексте веба: API — это набор URL-адресов (ручек), куда можно отправить запросы (GET, POST и т.д.) и получить данные в формате, например, JSON.

**Порт** - можно подумать что у компьютера есть один адрес (IP), но на нём могут "жить" разные программы. Чтобы понять, к какой именно программе обратиться, используют номер порта.

**Хост** - это адрес компьютера или сервера, к которому подключаемся. Например 127.0.0.1 — это localhost, твой собственный компьютер.

**JSON** — это способ, как сервер и клиент (например, браузер или мобильное приложение) «разговаривают» между собой, передавая данные в удобном, структурированном виде. JSON состоит из пар "ключ": значение, например: 

```{
  "name": "Alex",
  "age": 25,
  "isAdmin": false,
  "skills": ["Python", "JavaScript"]
}```


#### Взаимодействие клиента и сервера

Сценарий следующий

- Клиент отправляет на сервер HTTP запрос, например: GET, POST, PUT, DELETE и т.д.
- Сервер принимает его на одном из endpoint (ручек), выполняет логику приложения: обращается к базе данных, проверяет данные, формирует ответ.
- Сервер возвращает ответ. Обычно в формате JSON
- На стороне клиента, отображается ответ сервера в удобочитаемом виде

На примере FastAPI напишем минимальную «ручку»

Вот пример «ручки», которая отвечает на запрос к `/say_hello`

```from fastapi import FastAPI
import uvicorn```

`app = FastAPI()`

```@app.get("/say_hello")  # GET-запрос по адресу '/say_hello'
def home():
    return {"message": "Hello world!"}```

```if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000) # запускаем сервер```*
  
**Что происходит:**

- FastAPI создаёт сервер, который умеет принимать HTTP-запросы.
- `@app.get("/say_hello")` говорит: «Если кто-то пришёл по адресу `/say_hello` методом GET — запусти функцию `home`».
- Функция возвращает JSON с ключом "`message`".
- `uvicorn.run(...)` запускает сервер на 127.0.0.1:8000. 
- Запускаем сервер:  `uvicorn main:app --reload`
- Открываем браузер и переходим по адресу:  http://127.0.0.1:8000/docs

## Вэб-сервер

Термин «веб-сервер» может обозначать как аппаратное обеспечение, так и программные компоненты, или даже их сочетание.

- с точки зрения аппаратуры, веб-сервер представляет собой компьютер, который хранит файлы веб-сайта (такие как HTML-документы, CSS-стили, JavaScript-файлы, изображения и другие) и 
передает их на устройства пользователей (например, веб-браузеры). Он подключен к интернету и доступен по доменному имени, как, например, mozilla.org.

- с точки зрения программного обеспечения, веб-сервер включает в себя различные элементы, которые управляют доступом пользователей к файлам, размещенным на сервере. В частности, это
HTTP-сервер — компонент ПО, который обрабатывает URL-адреса и протокол HTTP, используемый браузерами для загрузки веб-страниц.

Статический веб сервер состоит из аппаратного сервера (компьютера) и установленного на него HTTP-сервером (ПО). Статическим он является потому, что отдает файлы без возможности их 
изменения - только просмотр.

Динамический веб-сервер включает в себя статический веб-сервер и дополнительное ПО, чаще всего сервер приложений и базу данных. Он называется «динамическим», поскольку сервер может 
изменять исходные файлы перед их отправкой в браузер через HTTP.

Итого, сервер может предоставлять статическое или динамическое содержимое. «Статическое» означает «отправляется без изменений». Статические веб-сайты проще всего создавать, «Динамическое»
подразумевает, что сервер обрабатывает или генерирует данные в реальном времени из базы данных. Это обеспечивает большую гибкость, но делает реализацию и обслуживание более сложными, что 
усложняет процесс создания сайта. Например, на веб-сервере, где размещена эта страница, работает сервер приложений, который извлекает текст статьи из базы данных, форматирует его и 
добавляет в HTML-шаблоны перед отправкой вам результата.

## HTTP

HTTP - протокол с помощью которого пользователь (посредством браузера) общается с сервером

Основные методы HTTP

- GET - Запрашивает ресурс. Не имеет тела запроса, только заголовок
- POST - Отправляет данные на ресурс (например заполненную форму регистрации)
- PUT - Вносит изменения на ресурс (Важно! Полностью его меняет) / создает ресурс (Полностью меняет ресурс - то есть заменяет старые данные новыми, для частичного обновления есть метод PATCH)
- DELETE - Удаляет ресурс

Коды HTTP

200 - ОК. Ресурс получен
300 - Переадресация. Ресурс существует, но нужно совершить дополнительное действие, что бы на него попасть
400 - Ошибка на стороне клиента
500 - Ошибка на стороне сервера


## Flask

### Виртуальное окружение

Виртуальное окружение позволяет изолировать зависимости вашего проекта от глобальных библиотек Python. Это особенно важно, когда для разных проектов требуются разные версии одних и тех 
же библиотек.

Установите virtualenv: `pip install virtualenv`

Далее

для Windows 
создаем: `python -m venv myenv`
активируем: `.\myenv\Scripts\activate`

для Linux: 
создаем: `virtualenv venv`
активируем: `source venv/bin/activate`
 
Далее установка самого фреймворка: `pip install flask`


В Flask объект request используется для обработки входящих HTTP-запросов. Он предоставляет доступ к различным частям запроса, таким как:

- Метод запроса: Например, request.method позволяет узнать, какой метод был использован (GET, POST.).
- Данные формы: Для получения данных, отправленных через формы, можно использовать request.form["name"].
- Файлы: Если запрос содержит загруженные файлы, к ним можно обратиться через request.files.